---
alwaysApply: false
description: End-to-end testing guidelines for npm packages - validating built packages work correctly when consumed by end users
---

# 📦 NPM Package E2E Tests Guide

E2E tests for npm packages verify that the built package works correctly when consumed by end users in real-world scenarios. These tests validate the complete package functionality, import/export capabilities, and API surface.

## 🎯 **Core Principles for NPM Packages**

- **Built Package Validation**: Test the actual built package (`dist/` directory)
- **Import/Export Compatibility**: Verify ES Modules and CommonJS support
- **API Surface Verification**: Ensure all exported functions/classes are accessible
- **Real Usage Scenarios**: Test how developers would actually use the package
- **Cross-Environment Compatibility**: Test in different Node.js environments
- **Type Safety**: Verify TypeScript types work correctly
- **Error Handling**: Test error scenarios and edge cases

## 📁 **File Naming and Location**

- E2E test files use `.mjs` for ES Modules and `.cjs` for CommonJS
- Place tests in a dedicated `e2e-test/` directory at the project root
- Use descriptive names: `test-built-library.mjs`, `advanced-workflow-test.mjs`
- Separate basic tests from advanced workflow tests

## 🏗️ **Test Structure for NPM Packages**

### **Basic Package Validation Test**

```javascript
#!/usr/bin/env node

/**
 * Basic E2E Test for Built NPM Package
 * Tests fundamental package functionality and API surface
 */

import { TrainingPeaksClient } from '../dist/index.js';

console.log('🧪 Testing NPM Package (ES Modules)...\n');

async function runBasicE2ETest() {
  try {
    // Test 1: Import and instantiation
    console.log('✅ Step 1: Import successful');

    const client = new TrainingPeaksClient({
      debug: true,
      timeout: 5000,
    });

    console.log('✅ Step 2: Client instantiation successful');

    // Test 2: Configuration methods
    const config = client.getConfig();
    if (!config || !config.baseUrl || !config.timeout) {
      throw new Error('Configuration methods not working');
    }
    console.log('✅ Step 3: Configuration methods work');

    // Test 3: Authentication state
    const isAuthenticated = client.isAuthenticated();
    if (typeof isAuthenticated !== 'boolean') {
      throw new Error('Authentication state method not working');
    }
    console.log('✅ Step 4: Authentication state works');

    // Test 4: API surface verification
    const requiredMethods = [
      'login',
      'logout',
      'getCurrentUser',
      'getWorkoutManager',
    ];
    requiredMethods.forEach((method) => {
      if (typeof client[method] !== 'function') {
        throw new Error(`Missing required method: ${method}`);
      }
    });
    console.log('✅ Step 5: All required methods exist');

    console.log('\n🎉 Basic E2E test passed!');
  } catch (error) {
    console.error('❌ E2E test failed:', error.message);
    process.exit(1);
  }
}

runBasicE2ETest();
```

### **Advanced Workflow Test**

```javascript
#!/usr/bin/env node

/**
 * Advanced E2E Test: Complete User Workflow
 * Simulates how a developer would use the package in a real application
 */

import { TrainingPeaksClient } from '../dist/index.js';

console.log('🚀 Advanced E2E Test: Complete User Workflow\n');

async function runAdvancedE2ETest() {
  let client;
  let workoutManager;

  try {
    // Setup: Initialize client
    client = new TrainingPeaksClient({
      debug: false,
      timeout: 10000,
    });

    console.log('📦 Step 1: SDK Setup Complete');

    // Authentication flow
    console.log('\n🔐 Step 2: Authentication Flow');
    const initialAuth = client.isAuthenticated();
    console.log(`✅ Initial auth state: ${initialAuth}`);

    const loginResult = await client.login('test_user', 'test_password');
    if (loginResult.success) {
      console.log('✅ Login successful');
      console.log(`✅ User: ${loginResult.user.username}`);
    }

    // Workout management
    console.log('\n💪 Step 3: Workout Management');
    workoutManager = client.getWorkoutManager();

    const workoutData = {
      name: 'Test Workout',
      description: 'E2E test workout',
      date: new Date().toISOString().split('T')[0],
      duration: 1800,
      distance: 5000,
      type: 'RUN',
      fileData: {
        filename: 'test.gpx',
        content: '<gpx>test</gpx>',
        mimeType: 'application/gpx+xml',
      },
    };

    const uploadResult = await workoutManager.uploadWorkout(workoutData);
    if (uploadResult.success) {
      console.log('✅ Workout upload successful');

      // Test retrieval
      const retrievedWorkout = await workoutManager.getWorkout(
        uploadResult.workout.id
      );
      if (retrievedWorkout.success) {
        console.log('✅ Workout retrieval successful');
      }
    }

    // Cleanup
    console.log('\n🚪 Step 4: Cleanup');
    await client.logout();
    console.log('✅ Logout successful');

    console.log('\n🎉 Advanced E2E test completed successfully!');
  } catch (error) {
    console.error('\n❌ Advanced E2E test failed:', error.message);
    process.exit(1);
  }
}

runAdvancedE2ETest();
```

## 🔧 **NPM Package Test Environment Setup**

### **Test Directory Structure**

```
e2e-test/
├── test-built-library.mjs          # Basic functionality test (ESM)
├── test-built-library.cjs          # Basic functionality test (CommonJS)
├── advanced-workflow-test.mjs      # Complete workflow simulation
├── compatibility-test.mjs          # Compatibility and edge cases
├── run-e2e.sh                     # Main test runner script
├── package.json                   # Test configuration
└── README.md                      # Test documentation
```

### **Test Runner Script**

```bash
#!/bin/bash

# E2E Test Runner for NPM Package
set -e

echo "🚀 Running E2E Tests for NPM Package"
echo "===================================="

# Build the package first
echo "🔨 Building package..."
npm run build

# Verify build output
if [ ! -f "dist/index.js" ] || [ ! -f "dist/index.cjs" ]; then
    echo "❌ Build verification failed"
    exit 1
fi

# Run tests
echo "🧪 Running tests..."
node e2e-test/test-built-library.mjs
node e2e-test/test-built-library.cjs
node e2e-test/advanced-workflow-test.mjs

echo "🎉 All E2E tests passed!"
```

## 📊 **Package Validation Tests**

### **Import/Export Compatibility**

```javascript
// Test ES Modules import
import { TrainingPeaksClient } from '../dist/index.js';

// Test CommonJS require
const { TrainingPeaksClient } = require('../dist/index.cjs');

// Test named exports
import {
  TrainingPeaksClient,
  createWorkoutManager,
  AuthToken,
  User,
} from '../dist/index.js';

// Test default export (if applicable)
import TrainingPeaksSDK from '../dist/index.js';
```

### **API Surface Verification**

```javascript
// Verify all exported classes/functions exist
const client = new TrainingPeaksClient();

// Test configuration methods
const config = client.getConfig();
expect(typeof config).toBe('object');
expect(typeof config.baseUrl).toBe('string');
expect(typeof config.timeout).toBe('number');

// Test authentication methods
expect(typeof client.login).toBe('function');
expect(typeof client.logout).toBe('function');
expect(typeof client.isAuthenticated).toBe('function');
expect(typeof client.getCurrentUser).toBe('function');

// Test workout manager
const workoutManager = client.getWorkoutManager();
expect(typeof workoutManager.uploadWorkout).toBe('function');
expect(typeof workoutManager.getWorkout).toBe('function');
expect(typeof workoutManager.listWorkouts).toBe('function');
```

### **Type Safety Validation**

```javascript
// Test return types
const authState = client.isAuthenticated();
if (typeof authState !== 'boolean') {
  throw new Error('isAuthenticated() should return boolean');
}

const userId = client.getUserId();
if (userId !== null && typeof userId !== 'string') {
  throw new Error('getUserId() should return string or null');
}

const config = client.getConfig();
if (typeof config !== 'object') {
  throw new Error('getConfig() should return object');
}
```

## 🔄 **Real Usage Scenarios**

### **Complete Developer Workflow**

```javascript
// Simulate how a developer would use the package
async function simulateDeveloperUsage() {
  // 1. Import and configure
  const client = new TrainingPeaksClient({
    debug: true,
    timeout: 10000,
  });

  // 2. Authenticate
  const loginResult = await client.login('username', 'password');
  if (!loginResult.success) {
    throw new Error('Authentication failed');
  }

  // 3. Use the package
  const workoutManager = client.getWorkoutManager();
  const uploadResult = await workoutManager.uploadWorkout({
    name: 'Morning Run',
    description: 'Great run in the park',
    date: '2024-01-01',
    duration: 1800,
    distance: 5000,
    type: 'RUN',
    fileData: {
      filename: 'run.gpx',
      content: gpxContent,
      mimeType: 'application/gpx+xml',
    },
  });

  // 4. Verify results
  if (!uploadResult.success) {
    throw new Error('Upload failed');
  }

  // 5. Cleanup
  await client.logout();
}
```

### **Error Handling Scenarios**

```javascript
// Test error handling
async function testErrorHandling() {
  const client = new TrainingPeaksClient();

  // Test invalid credentials
  try {
    await client.login('', '');
    throw new Error('Should have failed with empty credentials');
  } catch (error) {
    if (!error.message.includes('Invalid credentials')) {
      throw new Error('Wrong error message for invalid credentials');
    }
  }

  // Test invalid workout data
  const workoutManager = client.getWorkoutManager();
  try {
    await workoutManager.uploadWorkout({});
    throw new Error('Should have failed with invalid workout data');
  } catch (error) {
    // Should handle invalid data gracefully
  }
}
```

## 🚨 **NPM Package Specific Considerations**

### **Build Verification**

```javascript
// Verify build output exists and is valid
const fs = require('fs');
const path = require('path');

const requiredFiles = ['dist/index.js', 'dist/index.cjs', 'dist/index.d.ts'];

requiredFiles.forEach((file) => {
  if (!fs.existsSync(file)) {
    throw new Error(`Required build file missing: ${file}`);
  }
});

// Test that files can be imported
try {
  require('../dist/index.cjs');
  console.log('✅ CommonJS build is valid');
} catch (error) {
  throw new Error(`CommonJS build is invalid: ${error.message}`);
}
```

### **Package.json Validation**

```javascript
// Verify package.json exports are correct
const packageJson = require('../package.json');

// Check main entry points
if (!packageJson.main || !packageJson.module || !packageJson.types) {
  throw new Error('Package.json missing required entry points');
}

// Check exports field
if (!packageJson.exports || !packageJson.exports['.']) {
  throw new Error('Package.json missing exports field');
}
```

## 📋 **NPM Package E2E Test Checklist**

### **Before Running E2E Tests**

- [ ] Package is built (`npm run build`)
- [ ] Build output exists (`dist/` directory)
- [ ] All entry points are valid (ESM, CommonJS, Types)
- [ ] Package.json exports are correct
- [ ] Dependencies are installed

### **During E2E Tests**

- [ ] **Import/Export**: Test ES Modules and CommonJS imports
- [ ] **API Surface**: Verify all exported functions/classes exist
- [ ] **Configuration**: Test different configuration options
- [ ] **Authentication**: Test login/logout flow
- [ ] **Core Functionality**: Test main package features
- [ ] **Error Handling**: Test error scenarios
- [ ] **Type Safety**: Verify return types and data structures

### **After E2E Tests**

- [ ] **Cleanup**: Clean up any test data
- [ ] **Verification**: Confirm package state is clean
- [ ] **Documentation**: Update test results
- [ ] **Package Ready**: Confirm package is ready for npm publish

## 🎯 **Best Practices for NPM Package E2E Tests**

### **Test Organization**

```javascript
// ✅ Correct: Organize by package functionality
describe('NPM Package E2E Tests', () => {
  describe('Basic Functionality', () => {
    it('should import and instantiate correctly', () => {
      // Test basic import/instantiation
    });

    it('should have all required methods', () => {
      // Test API surface
    });
  });

  describe('Authentication Flow', () => {
    it('should handle login/logout correctly', () => {
      // Test auth flow
    });
  });

  describe('Core Features', () => {
    it('should upload and manage workouts', () => {
      // Test main functionality
    });
  });
});
```

### **Mock Implementation Handling**

```javascript
// ✅ Correct: Handle mock implementations gracefully
try {
  const result = await client.login('test', 'test');
  if (result.success) {
    console.log('✅ Login successful');
  }
} catch (error) {
  console.log('⚠️  Login test skipped (mock implementation)');
}
```

## 🚀 **Performance Considerations**

### **Test Execution Time**

- E2E tests should be fast (< 30 seconds total)
- Use appropriate timeouts for async operations
- Avoid unnecessary network calls
- Mock external dependencies when possible

### **Resource Management**

```javascript
// ✅ Correct: Clean up resources
let client;
let testData;

beforeEach(() => {
  client = new TrainingPeaksClient();
});

afterEach(async () => {
  if (client && client.isAuthenticated()) {
    await client.logout();
  }
});
```

## 📚 **Example NPM Package E2E Tests**

See the `e2e-test/` directory for concrete examples:

- `test-built-library.mjs` - Basic functionality test
- `advanced-workflow-test.mjs` - Complete workflow simulation
- `compatibility-test.mjs` - Compatibility and edge cases

## 🎯 **NPM Package E2E Testing Summary**

1. **Test the built package** (`dist/` directory), not source code
2. **Verify import/export compatibility** for ES Modules and CommonJS
3. **Validate API surface** - ensure all exports are accessible
4. **Test real usage scenarios** that developers would implement
5. **Handle error conditions** and edge cases gracefully
6. **Verify type safety** and return value consistency
7. **Test configuration options** and different setups
8. **Ensure cleanup** after tests complete
9. **Document test scenarios** for package consumers
10. **Validate package.json** exports and entry points

**Note:** These E2E tests are specifically designed for npm packages and focus on validating that the built package works correctly when consumed by end users, rather than testing internal application workflows.
