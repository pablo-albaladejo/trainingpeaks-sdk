---
alwaysApply: false
description: Integration tests guide for testing features and modules in real or simulated environments with multiple components
---

# 🧪 Integration Tests Guide

Integration tests in this codebase are designed to verify the correct behavior of features and modules in a real or simulated environment, often involving multiple components such as the database, authentication, and external APIs.

## 📁 **File Naming and Location**

- Integration test files typically use the `.integ-test.ts` suffix (e.g., `featureResolver.integ-test.ts`)
- They are usually located alongside the feature or resolver they test, often in the same directory as the corresponding implementation and unit test files

## 🏗️ **Structure**

### **Setup**

- **Authentication**: Perform authentication using test credentials, often loaded from [testEnvironment.ts](mdc:src/__fixtures__/test-environment.ts)
- **Database**: Initialize database proxies or fixtures for direct DB operations
- **Fixtures**: Use fixture builders from `src/__fixtures__/` for consistent test data

### **Test Cases**

Follow the **Arrange-Act-Assert** pattern:

```typescript
describe('Feature Integration Tests', () => {
  it('should perform expected behavior', async () => {
    // Arrange: Prepare necessary data in database
    const testUser = userBuilder.build();
    const testCompany = companyBuilder.build();
    await db.insert(users).values(testUser);
    await db.insert(companies).values(testCompany);

    // Act: Call relevant GraphQL mutation, query, or API endpoint
    const result = await client.mutate({
      mutation: CREATE_FEATURE,
      variables: { input: { userId: testUser.id, companyId: testCompany.id } },
    });

    // Assert: Check response and validate resulting state
    expect(result.data.createFeature).toStrictEqual({
      id: expect.any(String),
      userId: testUser.id,
      companyId: testCompany.id,
      status: 'ACTIVE',
    });

    // Verify side effects in database
    const dbRecord = await db
      .select()
      .from(features)
      .where(eq(features.id, result.data.createFeature.id));
    expect(dbRecord[0]).toStrictEqual(
      expect.objectContaining({
        userId: testUser.id,
        companyId: testCompany.id,
      })
    );
  });
});
```

### **Error Handling**

Test invalid input or edge cases to ensure proper error responses:

```typescript
it('should handle invalid input gracefully', async () => {
  // Arrange
  const invalidInput = { userId: 'invalid-id', companyId: -1 };

  // Act
  const result = await client.mutate({
    mutation: CREATE_FEATURE,
    variables: { input: invalidInput },
  });

  // Assert
  expect(result.errors).toBeDefined();
  expect(result.errors[0].message).toContain('Invalid user ID');
});
```

### **Teardown**

Clean up any test data created during the test to ensure isolation between tests:

```typescript
afterEach(async () => {
  await db.delete(features).where(eq(features.companyId, testCompany.id));
  await db.delete(users).where(eq(users.id, testUser.id));
});
```

## 📋 **Conventions**

### **Test Data Consistency**

- Use the same test user and companyId for consistency, typically from `testConfiguration`
- Prefer direct database assertions (using Drizzle ORM or similar) to verify side effects
- Follow the Arrange-Act-Assert pattern for clarity
- Use descriptive test names to indicate the scenario being tested

### **Random Data Generation**

- When generating random values in integration tests, use `faker`
- For number types, use `randomNumber` from [utils.fixture.ts](mdc:src/__fixtures__/utils.fixture.ts)
- For common types, prefer generating fixture builder helpers in `src/__fixtures__/`

```typescript
// ✅ Correct: Using faker and fixture builders
import { faker } from '@faker-js/faker';
import { randomNumber } from '@/__fixtures__/utils.fixture';
import { userBuilder } from '@/__fixtures__/user.fixture';

const testUser = userBuilder.build({
  id: randomNumber(),
  email: faker.internet.email(),
  name: faker.person.fullName(),
});

// ✅ Correct: Using domain constants with faker
const language = faker.helpers.arrayElement(LANGUAGES);
const responseType = faker.helpers.arrayElement(RESPONSE_TYPES);

// ❌ Avoid: Hardcoded values (except for specific test scenarios)
const language = 'en'; // Only use for parametrized tests
```

### **Assertions**

- Prefer using `toStrictEqual` over `toEqual` in assertions
- Use `expect.any(String)` for dynamic values like IDs
- Use `expect.objectContaining()` for partial object matching

```typescript
// ✅ Correct: Strict equality for exact matching
expect(result.data).toStrictEqual({
  id: expect.any(String),
  name: 'Test Feature',
  status: 'ACTIVE',
});

// ✅ Correct: Partial matching for complex objects
expect(dbRecord[0]).toStrictEqual(
  expect.objectContaining({
    userId: testUser.id,
    companyId: testCompany.id,
  })
);
```

### **Domain Constants**

- When selecting from domain constants (e.g., languages, response types), use `faker.helpers.arrayElement()` with the appropriate constant array
- Exception: Use hardcoded values when testing specific scenarios that require fixed values (e.g., parametrized tests with `it.each`)

```typescript
// ✅ Correct: Random selection from constants
const language = faker.helpers.arrayElement(LANGUAGES);
const status = faker.helpers.arrayElement(USER_STATUSES);

// ✅ Correct: Hardcoded for parametrized tests
it.each(LANGUAGES)('should handle language %s', async (language) => {
  // Test specific language handling
});
```

## 🔍 **Navigation**

- Look for `.integ-test.ts` files to find integration tests for a given feature or resolver
- Refer to the corresponding implementation and unit test files for additional context
- Check `src/__fixtures__/` for available test data builders

## 📚 **Example Integration Test**

See [training-peaks-workout.integ-test.ts](mdc:src/infrastructure/repositories/training-peaks-workout.integ-test.ts) for a concrete example of an integration test following these conventions.

## 🚨 **Common Pitfalls to Avoid**

### **Test Isolation**

```typescript
// ❌ Avoid: Tests that depend on each other
it('should create user', async () => {
  const user = await createUser();
  globalTestUser = user; // Shared state
});

it('should update user', async () => {
  await updateUser(globalTestUser.id); // Depends on previous test
});

// ✅ Correct: Each test is independent
it('should create user', async () => {
  const user = await createUser();
  expect(user.id).toBeDefined();
});

it('should update user', async () => {
  const user = userBuilder.build();
  await db.insert(users).values(user);

  const updated = await updateUser(user.id);
  expect(updated.name).toBe('Updated Name');
});
```

### **Database Cleanup**

```typescript
// ❌ Avoid: No cleanup
it('should create feature', async () => {
  await createFeature(); // Leaves data in database
});

// ✅ Correct: Proper cleanup
afterEach(async () => {
  await db.delete(features).where(eq(features.companyId, testCompany.id));
});
```

### **Async/Await**

```typescript
// ❌ Avoid: Missing await
it('should create user', () => {
  const result = createUser(); // Missing await
  expect(result.id).toBeDefined();
});

// ✅ Correct: Proper async handling
it('should create user', async () => {
  const result = await createUser();
  expect(result.id).toBeDefined();
});
```

## 🎯 **Best Practices Summary**

1. **Use `.integ-test.ts` suffix** for integration test files
2. **Follow Arrange-Act-Assert pattern** for clear test structure
3. **Use fixture builders** from `src/__fixtures__/` for consistent test data
4. **Generate random data with faker** and `randomNumber()`
5. **Use `toStrictEqual`** for assertions
6. **Clean up test data** in `afterEach` hooks
7. **Test error scenarios** and edge cases
8. **Verify side effects** in the database
9. **Use descriptive test names** that explain the scenario
10. **Keep tests independent** and isolated

- Refer to the corresponding implementation and unit test files for additional context.

## Example

See [unassignPlaybookSettingsResolver.integ-test.ts](mdc:src/adapters/lambda/graphql/unassignPlaybookSettings/unassignPlaybookSettingsResolver.integ-test.ts) for a concrete example of an integration test following these conventions.
