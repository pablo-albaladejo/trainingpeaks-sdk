---
alwaysApply: true
description: Hexagonal architecture patterns and strict separation of concerns for TypeScript projects
---

# 🏗️ Hexagonal Architecture (Clean Architecture)

## 🚨 **CRITICAL: Strict Ports & Adapters Separation**

The application layer MUST ONLY contain **contracts, types, and interfaces**.
The infrastructure layer MUST contain **all implementations**.

### **📋 Application Layer: ONLY Definitions & Contracts**

All services in `src/application/services/` MUST use **individual function types** instead of grouped interface patterns.

#### **✅ CORRECT: Individual Function Types**

```typescript
// ✅ CORRECT: src/application/services/user-validation.ts
export type validateUserId = (userId: string) => void;
export type validateEmail = (email: string) => void;
export type validateListUsersFilters = (filters: Filters) => void;
```

#### **❌ INCORRECT: Grouped Interface Pattern**

```typescript
// ❌ WRONG: src/application/services/user-validation.ts
export type UserValidationService = {
  validateUserId: (userId: string) => void;
  validateEmail: (email: string) => void;
  validateListUsersFilters: (filters: Filters) => void;
};
```

### **⚙️ Infrastructure Layer: ONLY Implementations**

All implementations in `src/infrastructure/services/` MUST be factory functions that receive dependencies as parameters and return the exact implementation of the individual function type.

#### **✅ CORRECT: Individual Function Exports**

```typescript
// ✅ CORRECT: src/infrastructure/services/user-validation.ts
import type {
  validateUserId,
  validateEmail,
} from '@/application/services/user-validation';

export const validateUserId: validateUserId = (userId: string): void => {
  // implementation
};

export const validateEmail: validateEmail = (email: string): void => {
  // implementation
};
```

#### **❌ ABSOLUTELY FORBIDDEN: Grouped Factory Functions**

```typescript
// ❌ WRONG: src/infrastructure/services/user-validation.ts
export const createUserValidationService = (dependencies) => ({
  validateUserId: (userId: string): void => {
    /* */
  },
  validateEmail: (email: string): void => {
    /* */
  },
});
```

### **🔧 For Functions That Need Dependencies**

```typescript
// ✅ CORRECT: src/infrastructure/services/user-validation.ts
export const validateUserId =
  (logger: Logger): validateUserId =>
  (userId: string): void => {
    // implementation
  };
```

## 🎯 **Use Cases: Pure Orchestration**

Use cases orchestrate contracts - never direct implementations:

```typescript
// ✅ CORRECT: src/application/use-cases/create-user.ts
export const createUserUseCase =
  (
    userRepository: UserRepository, // ← PORT (contract)
    validationService: UserValidationService, // ← PORT (contract)
    utilityService: UserUtilityService // ← PORT (contract)
  ) =>
  async (input: CreateUserInput): Promise<CreateUserResponse> => {
    // 🎯 ORCHESTRATE USING CONTRACTS ONLY
    validationService.validateUserCreationRules(input);
    const userId = utilityService.generateUserId();
    return await userRepository.createUser({ ...input, id: userId });
  };
```

## 📁 **Strict Directory Structure**

```
src/
├── application/
│   ├── services/           # 📋 ONLY TYPE DEFINITIONS & CONTRACTS
│   ├── ports/              # 📋 REPOSITORY & EXTERNAL CONTRACTS
│   └── use-cases/          # 🎯 ORCHESTRATION USING CONTRACTS
├── infrastructure/
│   ├── services/           # ⚙️ ACTUAL IMPLEMENTATIONS OF APPLICATION/SERVICES
│   ├── repositories/       # 💾 ACTUAL IMPLEMENTATIONS OF APPLICATION/PORTS
│   └── http/              # 🌐 HANDLERS WITH DEPENDENCY INJECTION
└── domain/                # 🎯 PURE BUSINESS LOGIC
    ├── entities/           # Classes with behavior
    ├── value-objects/      # Immutable values
    └── errors/            # Domain-specific exceptions
```

## 🚨 **CRITICAL VIOLATIONS TO AVOID**

```typescript
// ❌ ABSOLUTELY FORBIDDEN: Implementation in application layer
export const createUserValidationService = () => {
  const validateUserId = (userId: string): void => {
    if (!userId) throw new Error('Invalid ID'); // ❌ IMPLEMENTATION CODE
  };
  return { validateUserId }; // ❌ RETURNING IMPLEMENTATION
};

// ❌ ABSOLUTELY FORBIDDEN: Direct implementation imports in use cases
import { createUserValidationService } from '@/application/services/user-validation'; // ❌ WRONG

// ❌ ABSOLUTELY FORBIDDEN: Mixed contracts and implementations
export type UserService = { createUser: (input) => Promise<User> };
export const createUserService = (repo) => ({
  // ❌ IMPLEMENTATION IN SAME FILE
  createUser: async (input) => {
    return await repo.create(input);
  },
});
```

## 🧪 **Testing with This Pattern**

```typescript
// ✅ PERFECT TESTABILITY - Mock contracts easily
describe('createUserUseCase', () => {
  const mockValidationService: UserValidationService = {
    validateUserId: vi.fn(),
    validateEmail: vi.fn(),
    validateListUsersFilters: vi.fn(),
    validateUserCreationRules: vi.fn(),
    validateUserCanBeDeleted: vi.fn(),
  };

  it('should create user successfully', async () => {
    const useCase = createUserUseCase(
      mockRepository,
      mockValidationService,
      mockUtilityService
    );
    const result = await useCase(validInput);
    expect(mockValidationService.validateUserCreationRules).toHaveBeenCalled();
  });
});
```

## 🎯 **Benefits of This Strict Separation**

1. **True Dependency Inversion**: High-level modules don't depend on low-level modules
2. **Perfect Testability**: Can easily mock any contract for testing
3. **Swappable Implementations**: Can have multiple implementations of same contract
4. **Clear Boundaries**: Impossible to accidentally mix layers
5. **Hexagonal Compliance**: True ports & adapters pattern
6. **ISP Compliance**: Interface Segregation - each contract is focused
   This project follows hexagonal architecture with modern TypeScript patterns, emphasizing clean separation of concerns,
   comprehensive testing, and AI-driven features.
